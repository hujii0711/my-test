1. 로컬 회원가입시 기존 회원 여부 확인 --> AuthService.isRegisterUser
2. 로컬 회원가입시 비밀번호, 이메일 입력 validation
3. 로컬 회원가입시 비밀번호 암호화 --> bcript
4. 로컬 로그인시 비밀번호 틀렸거나 존재하지 않은 이메일로 로그인할 때 처리 --> freepass 말고 users.id를 password로 넘겨 결국 users.id로 로그인 수행
5. 토큰기반 로그인 구현 + token은 DB에 저장하기
- 현재 passport기반 로그인의 경우 세션 기반 로그인 수행 작업이므로 자동 로그인할 때 jwt.verify하여 decoded 한 데이터도 user정보 뽑아 쓸 이유가 없다.
그냥 users.id 정보 asyncStorage에 저장하면 그만이다.
--> passport로 세션 기반 로그인해봤으니, 별개로 토큰 기반 로그인을 작업해보자.
6. 주요 비밀키 람다 환경변수화
7. 구글 로그인 후속 처리
- 구글 로그인후 users 테이블에 user 정보 등록
- loginType=google일 때 앱화면 첫 접속시 처리
8. 구글 로그인 토큰 만료시 리플레시 토큰 받아서 로그인 하는 방법
9. 비밀번호 찾기
- 알림 서비스 또는 이메일로 임시 비밀번호 보내서 비밀번호 새등록
10. 세션 정보 sessions에서 다른 테이블 이름으로 바꿔보기
11. AWS Lambda esm 사용해보기