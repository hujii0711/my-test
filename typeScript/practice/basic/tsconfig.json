{
  "compilerOptions": {
    "target": "ES2015",
    /* 타입스크립트 컴파일러가 변환할 자바스크립트 표준 버전이다.
    ECMAScript 목표 버전 설정: 'ES3'(기본), 'ES5', 'ES2015', 'ES2016', 'ES2017','ES2018', 'ES2019', 'ES2020', or 'ESNEXT'. */

    "module": "es2015",
    /* 자바스크립트 모듈 방식을 지정하는 것 node.js 14 표준에서도 정상 동작하기 위해 commonjs로 설정한다.
    생성될 모듈 코드 설정: 'none', 'commonjs', 'amd', 'system', 'umd', 'es2015', 'es2020', or 'ESNext'. */

    "esModuleInterop": true,
    /* 모든 가져오기에 대한 네임스페이스 객체 생성을 통해 CommonJS와 ES 모듈 간의 상호 운용성을 제공.(commonJS 모듈을 ES6로 import) 'allowSyntheticDefaultImports' 암시
    또한 AMD 방식(웹브라우저 모듈 시스템)으로 구현된 라이브러리가 CommonJS에서도 동작하기 위해서는 true값 설정
    여러 자바스크립트 모듈 사양의 상호 호환을 위한 설정으로, 다양한 형태의 라이브러리를 사용할 때 켜두는 것이 좋다.
    */

    //"forceConsistentCasingInFileNames": true,
    /* 대소문자를 구분하지 않고 파일시스템을 가지는 윈도우 등의 환경에서 잘못된 파일 참조를 사전에 막기 위한 옵션으로
    켜두는 것이 좋다. */

    //"strict": true,
    /* 모든 엄격한 유형 검사 옵션 활성화
    잘못 작성될 수 있는 코드에 대한 정적 검사 항목이 늘어나 타입 관련 문제를 실행 이전에 확인할 수 있다.
    */

    //"skipLibCheck": true,
    /* 선언 파일 유형 검사 스킵 */

    "baseUrl": "." /* 절대 경로 모듈이 아닌, 모듈이 기본적으로 위치한 디렉토리 설정 (예: './modules-name') */,
    /* baseUrl과 outDir 키에는 트랜스파일된 자바스크립트 파일을 저장하는 디렉터리를 설정.
     따라서 현재 디렉터리를 의미하는 '.'로 baseUrl 키값을 설정하는 것이 보통이다. */

    "outDir": "dist",
    /* outDir 키는 baseUrl 설정값을 기준으로 했을 때 하위 디렉터리의 이름이다. 앞서 이 키는 dist라는 값을 설정했으므로
    빌드된 결과가 dist 디렉터리에 만들어진다. */

    //"sourceMap": true,
    /* 소스맵 '.map' 파일 생성 설정, 주로 디버깅할 때 사용 */

    //"downlevelIteration": true,
    /* 출력될 디렉토리 설정 */

    //"noImplicitAny": true,
    /* true 값이 설정 시 명시적이지 않은 'any' 유형으로 표현식 및 선언 사용 시 오류 발생  */

    //"lib": ["dom", "dom.iterable", "esnext"],
    /* 컴파일 과정에 사용될 라이브러리 파일 설정 */

    "paths": {
      "*": ["node_modules/*"]
    }
    /* paths 키에는 소스 파일의 import문에서 from 부분을 해석할 때 찾아야 하는 디렉터리를 설정한다.
    import 문이 찾아야 하는 소스가 외부 패키지인 node_modules 디렉터리에서 찾아야 하므로 'node_modules/*'를 포함하였다.*/

    //"moduleResolution": "node"
    /* module 키의 값이 commonjs이면 노드제이에스에서 동작하는 것을 의미하므로 항상 node로 설정한다. */
  },

  //변환 대상 개별 파일의 경로를 설정 파일에 정의 (files는 개별 파일, include는 폴더채)
  //files 전역 속성은 컴파일할 대상 개별 파일들을 담은 리스트 이다.
  //프로그램에 포함하고 싶은 파일들의 목록을 지정한다. (파일 확장자까지 정확히 작성해줘야 한다)
  //files는 exclude보다 우선순위가 높아서 특정 파일을 지정해서 컴파일 할때 쓰인다.
  //"files": ["app.ts", "./utils/math.ts"],

  // 컴파일 과정에서 포함할 파일
  // src 디렉터리와 src의 하위 디렉터리에 있는 모든 파일을 컴파일 대상으로 포함한다는 의미
  "include": ["src/**/*"]

  // 컴파일 제외 항목을 기입
  //"exclude": ["node_modules"],

  // 다른 타입스크립트 설정의 내용을 가져와 덮어씀
  // extends는 다른 tsconfig 설정들을 가져와 쓸때 사용되는 옵션이다.
  // 특정 타입스크립트 설정 파일에서 다른 타입스크립트 설정의 내용을 가져와 추가할 수 있다.
  // 예를들어 config/base.json 파일의 속성 설정을 현 tsconfig.json 파일에 포맷이 맞으면 가져올 수 있다.
  //"extends": "./config/base",
}
